#!/usr/bin/env bash

# temporal:info <service_name>
temporal:info() {
    local service_name="$1"
    echo "DEBUG: [temporal:info] Function called with service_name='$service_name'" >&2

    if ! validate_service_name "$service_name" "info"; then
        return 1
    fi

    # Check if the service is configured by trying to get its prefixed global config var.
    local service_config_db_type_var="TEMPORAL_SERVICE_${service_name}_DB_TYPE"
    echo "DEBUG: [temporal:info] Checking if service '$service_name' is configured via global var '$service_config_db_type_var'." >&2
    local db_type_check
    db_type_check=$(dokku config:get --global "$service_config_db_type_var" 2>/dev/null)
    local exit_code_config_get=$?

    if [ "$exit_code_config_get" -ne 0 ] || [ -z "$db_type_check" ]; then # Check exit code and if value is empty
        echo "DEBUG: [temporal:info] 'dokku config:get --global $service_config_db_type_var' failed (exit code $exit_code_config_get) or returned empty value ('$db_type_check')." >&2
        echo "Error: Temporal service '$service_name' does not appear to exist or is not fully configured."
        echo "Hint: Was it created with 'dokku temporal:create $service_name'?"
        return 1
    fi
    echo "DEBUG: [temporal:info] Service '$service_name' exists (found $service_config_db_type_var='$db_type_check')." >&2

    echo "Temporal Service Information:"
    echo "  Name: $service_name"
    echo "  Database Type: $db_type_check"

    local linked_apps
    linked_apps=$(get_linked_apps "$service_name")
    if [ -n "$linked_apps" ]; then
        echo "  Linked to Apps:"
        echo "$linked_apps" | while IFS= read -r app; do echo "    - $app"; done
    else
        echo "  Linked to Apps: None"
    fi

    echo "  Status (temporal-server-$service_name container):"
    if docker ps --filter "name=^temporal-server-${service_name}$" --format "{{.Names}}" | grep -q "^temporal-server-${service_name}$"; then
        docker ps --filter "name=^temporal-server-${service_name}$" --format "    {{.Names}}: {{.Status}} (Ports: {{.Ports}})"
    else
        echo "    temporal-server-$service_name: Not running or does not exist"
    fi

    local dokku_db_status
    dokku_db_status=$(dokku "$db_type_check":info "$service_name" --status 2>/dev/null)
    if [ $? -eq 0 ] && [ -n "$dokku_db_status" ]; then
      echo "  Dokku Datastore ($db_type_check: $service_name) Status: $dokku_db_status"
    else
      echo "  Dokku Datastore ($db_type_check: $service_name) Status: Error retrieving or unknown"
    fi

    echo "DEBUG: [temporal:info] Function finished for '$service_name'." >&2
    return 0
}