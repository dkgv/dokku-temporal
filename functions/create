#!/usr/bin/env bash

# temporal:create <service_name> [db_type] [--db-service=existing_service_name]
temporal:create() {
    local service_name="$1"
    local db_type="${2:-postgres}"
    local db_service=""
    
    # Parse --db-service option from remaining arguments
    shift 2 2>/dev/null || shift $# 2>/dev/null
    while [[ $# -gt 0 ]]; do
        case $1 in
            --db-service=*)
                db_service="${1#*=}"
                shift
                ;;
            *)
                echo "Error: Unknown option: $1"
                return 1
                ;;
        esac
    done
    
    echo "DEBUG: [temporal:create] Called with service_name='$service_name', db_type='$db_type', db_service='$db_service'" >&2

    if ! validate_service_name "$service_name" "create"; then
        return 1
    fi

    # 1. Check if the Temporal service already exists
    local config_var_name="TEMPORAL_SERVICE_${service_name}_DB_TYPE"
    echo "DEBUG: [temporal:create] Checking if $config_var_name is set globally..." >&2
    local existing_temporal_db_type
    existing_temporal_db_type=$(dokku config:get --global "$config_var_name" 2>/dev/null)
    local config_get_rc=$?

    if [ "$config_get_rc" -eq 0 ] && [ -n "$existing_temporal_db_type" ]; then
        echo "Error: Temporal service '$service_name' already configured (found $config_var_name='$existing_temporal_db_type')."
        echo "Hint: To re-create, first destroy it using 'dokku temporal:destroy $service_name'"
        return 1
    fi
    echo "DEBUG: [temporal:create] Temporal service '$service_name' not yet configured. Proceeding." >&2

    # 2. Validate database type and check if plugin is installed
    case "$db_type" in
        postgres|mysql)
            if ! check_db_plugin "$db_type"; then 
                echo "Please install the $db_type plugin first:"
                echo "dokku plugin:install https://github.com/dokku/dokku-$db_type.git $db_type"
                return 1
            fi
            ;;
        *)
            echo "Error: Invalid or unsupported database type '$db_type'. Supported: postgres, mysql."
            return 1
            ;;
    esac
    echo "DEBUG: [temporal:create] Database type '$db_type' is valid and its plugin is installed." >&2

    # 3. Create Docker network for Temporal services
    local temporal_docker_network="temporal-network"
    echo "DEBUG: [temporal:create] Ensuring Docker network '$temporal_docker_network' exists..."
    if ! docker network inspect "$temporal_docker_network" >/dev/null 2>&1; then
        echo "Info: Creating Docker network '$temporal_docker_network'..."
        if docker network create "$temporal_docker_network"; then
            echo "Docker network '$temporal_docker_network' created successfully."
        else
            echo "Error: Failed to create Docker network '$temporal_docker_network'."
            return 1
        fi
    else
        echo "Info: Docker network '$temporal_docker_network' already exists."
    fi

    # 4. Create or validate underlying Dokku datastore
    local actual_db_service="${db_service:-$service_name}"
    echo "DEBUG: [temporal:create] Using database service: '$actual_db_service'" >&2
    
    if [ -n "$db_service" ]; then
        # User specified existing database service - validate it exists
        echo "DEBUG: [temporal:create] Validating existing $db_type service '$db_service'..."
        if ! dokku "$db_type:info" "$db_service" >/dev/null 2>&1; then
            echo "Error: Specified database service '$db_service' does not exist."
            echo "Please create it first with: dokku $db_type:create $db_service"
            return 1
        fi
        echo "Info: Using existing $db_type service '$db_service'."
    else
        # Default behavior - create database service with same name as temporal service
        echo "DEBUG: [temporal:create] Checking if $db_type service '$service_name' exists..."
        local db_exists=false
        
        # Try multiple ways to check if the service exists
        if dokku "$db_type:exists" "$service_name" 2>/dev/null | grep -q "true"; then
            db_exists=true
        elif dokku "$db_type:info" "$service_name" >/dev/null 2>&1; then
            db_exists=true
        fi
        
        if [ "$db_exists" = true ]; then
            echo "Info: Underlying $db_type service '$service_name' already exists. Will reuse it."
        else
            echo "Creating $db_type service '$service_name'..."
            if ! dokku "$db_type:create" "$service_name"; then
                echo "Error: Failed to create $db_type service '$service_name'."
                echo "This is required for Temporal to function. Please check the $db_type plugin installation."
                return 1
            fi
            echo "$db_type service '$service_name' created successfully."
            
            # Verify the service was actually created
            sleep 2
            if ! dokku "$db_type:info" "$service_name" >/dev/null 2>&1; then
                echo "Error: $db_type service '$service_name' was not created properly."
                return 1
            fi
        fi
    fi

    # 5. Store configuration for this Temporal service
    echo "DEBUG: [temporal:create] Setting global config: ${config_var_name}=${db_type}" >&2
    if ! dokku config:set --global --no-restart "${config_var_name}=${db_type}"; then
        local config_set_rc=$?
        echo "Error: Failed to set $config_var_name. 'dokku config:set --global' exited with $config_set_rc." >&2
        echo "Warning: Temporal service '$service_name' is in an inconsistent state."
        
        # Cleanup: Remove the database service if we just created it (only if not using existing service)
        if [ -z "$db_service" ] && [ "$db_exists" = false ]; then
            echo "Cleaning up: Removing the $db_type service that was just created..."
            dokku "$db_type:destroy" "$service_name" --force 2>/dev/null || true
        fi
        return 1
    fi
    
    # Store the database service name if different from temporal service name
    if [ -n "$db_service" ]; then
        local db_service_var_name="TEMPORAL_SERVICE_${service_name}_DB_SERVICE_NAME"
        echo "DEBUG: [temporal:create] Setting global config: ${db_service_var_name}=${db_service}" >&2
        if ! dokku config:set --global --no-restart "${db_service_var_name}=${db_service}"; then
            echo "Error: Failed to set $db_service_var_name." >&2
            echo "Warning: Temporal service '$service_name' is in an inconsistent state."
            return 1
        fi
    fi

    # 6. Add to service list
    add_service "$service_name"

    echo ""
    echo "âœ“ Temporal service '$service_name' created successfully!"
    echo "  Database type: $db_type"
    echo "  Database service: $actual_db_service"
    echo "  Docker network: $temporal_docker_network"
    echo ""
    echo "Next steps:"
    echo "  1. Start the service: dokku temporal:start $service_name"
    echo "  2. Link to an app: dokku temporal:link $service_name <your_app>"
    echo ""
    return 0
}