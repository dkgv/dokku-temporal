#!/usr/bin/env bash

# Temporal configuration management

# Show current service configuration
temporal:config() {
    local service_name="${1:-}"
    
    if ! validate_service_name "$service_name" "config"; then
        return 1
    fi
    
    echo "Temporal Service Configuration:"
    echo "  Service Name: $service_name"
    
    # Get database type
    local service_config_db_type_var="TEMPORAL_SERVICE_${service_name}_DB_TYPE"
    local db_type
    db_type=$(dokku config:get --global "$service_config_db_type_var" 2>/dev/null)
    
    if [ -z "$db_type" ]; then
        echo "  Status: Not configured"
        echo "  Hint: Run 'dokku temporal:create $service_name' first"
        return 1
    fi
    
    echo "  Database Type: $db_type"
    
    # Check if service is running
    local container_name="temporal-server-$service_name"
    if docker ps --filter "name=^${container_name}$" --format "{{.Names}}" | grep -q "^${container_name}$"; then
        echo "  Status: Running"
        
        # Get access URLs
        echo "  Server Address: localhost:7233"
        echo "  Web UI: http://localhost:8080"
        echo "    (Use SSH tunnel for remote access: ssh -L 8080:localhost:8080 user@server)"
    else
        echo "  Status: Stopped"
        echo "  Hint: Run 'dokku temporal:start $service_name' to start"
    fi
    
    # Show linked apps
    local linked_apps
    linked_apps=$(get_linked_apps "$service_name")
    if [ -n "$linked_apps" ]; then
        echo "  Linked Apps:"
        echo "$linked_apps" | while IFS= read -r app; do echo "    - $app"; done
    else
        echo "  Linked Apps: None"
    fi
    
    # Show database info if available
    echo ""
    echo "Database Information:"
    if dokku "$db_type:info" "$service_name" >/dev/null 2>&1; then
        dokku "$db_type:info" "$service_name" | grep -E "(Status|Dsn|Internal ip)" | sed 's/^/  /'
    else
        echo "  Database service not found"
    fi
}

# Get specific config value  
temporal:config:get() {
    local service_name="${1:-}"
    local key="$2"
    
    if ! validate_service_name "$service_name" "config:get"; then
        return 1
    fi
    
    if [ -z "$key" ]; then
        echo "Usage: dokku temporal:config:get <service> <key>"
        echo ""
        echo "Available keys:"
        echo "  db-type        Database type (postgres/mysql)"
        echo "  server-address Server gRPC address"
        echo "  web-ui-url     Web UI URL (with tunnel command)"
        echo "  status         Service status"
        return 1
    fi
    
    case "$key" in
        "db-type")
            local service_config_db_type_var="TEMPORAL_SERVICE_${service_name}_DB_TYPE"
            dokku config:get --global "$service_config_db_type_var" 2>/dev/null || echo "Not configured"
            ;;
        "server-address")
            echo "localhost:7233"
            ;;
        "web-ui-url")
            echo "http://localhost:8080"
            ;;
        "status")
            local container_name="temporal-server-$service_name"
            if docker ps --filter "name=^${container_name}$" --format "{{.Names}}" | grep -q "^${container_name}$"; then
                echo "running"
            else
                echo "stopped"
            fi
            ;;
        *)
            echo "Unknown key: $key"
            echo "Run 'dokku temporal:config:get $service_name' for available keys"
            return 1
            ;;
    esac
}

# Get Temporal Web UI URL with tunnel instructions
temporal:config:web-ui() {
    local service_name="${1:-}"
    
    if ! validate_service_name "$service_name" "config:web-ui"; then
        return 1
    fi
    
    echo "Web UI Access:"
    echo "  Local: http://localhost:8080"
    echo "  Remote: ssh -L 8080:localhost:8080 user@$(hostname)"
    echo "  Then browse to: http://localhost:8080"
}

# Get server connection details
temporal:config:server() {
    local service_name="${1:-}"
    
    if ! validate_service_name "$service_name" "config:server"; then
        return 1
    fi
    
    echo "Temporal Server Connection:"
    echo "  gRPC Address: localhost:7233"
    echo "  Default Namespace: default"
    echo ""
    echo "For applications, set these environment variables:"
    echo "  TEMPORAL_ADDRESS=localhost:7233"
    echo "  TEMPORAL_NAMESPACE=default"
    echo ""
    echo "Or link your app:"
    echo "  dokku temporal:link $service_name <your-app>"
}

# Show config help
temporal:config:help() {
    cat << EOF
Usage: temporal:config <command> [args]

Available commands:
    config <service>           Show complete service configuration
    config:get <service> <key> Get specific configuration value
    config:web-ui <service>    Show Web UI access instructions  
    config:server <service>    Show server connection details

Available keys for config:get:
    db-type        Database type (postgres/mysql)
    server-address Server gRPC address  
    web-ui-url     Web UI URL
    status         Service status (running/stopped)

Examples:
    # Show complete configuration
    dokku temporal:config my-temporal

    # Get specific values
    dokku temporal:config:get my-temporal db-type
    dokku temporal:config:get my-temporal status

    # Get connection details
    dokku temporal:config:server my-temporal
    dokku temporal:config:web-ui my-temporal
EOF
}