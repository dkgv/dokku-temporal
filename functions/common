#!/usr/bin/env bash

# Common functions used across commands

echo "DEBUG: [./functions/common] Sourced." >&2

# Check if a database plugin exists by checking its 'commands' script
check_db_plugin() {
    local db_type="$1"
    echo "DEBUG: [check_db_plugin] Checking for existence and executability of '$db_type' plugin's command script." >&2

    # PLUGIN_ENABLED_PATH is exported by Dokku's environment, e.g., /var/lib/dokku/plugins/enabled
    local target_plugin_commands_script="$PLUGIN_ENABLED_PATH/$db_type/commands"

    echo "DEBUG: [check_db_plugin] Target script path: $target_plugin_commands_script" >&2

    if [ -f "$target_plugin_commands_script" ] && [ -x "$target_plugin_commands_script" ]; then
        echo "DEBUG: [check_db_plugin] Command script for '$db_type' plugin found and is executable." >&2
        echo "DEBUG: [check_db_plugin] Assuming plugin '$db_type' is installed and enabled." >&2
        return 0
    else
        if [ ! -f "$target_plugin_commands_script" ]; then
            echo "DEBUG: [check_db_plugin] Command script for '$db_type' NOT FOUND at $target_plugin_commands_script." >&2
        elif [ ! -x "$target_plugin_commands_script" ]; then
            echo "DEBUG: [check_db_plugin] Command script for '$db_type' FOUND but NOT EXECUTABLE at $target_plugin_commands_script." >&2
        fi
        # User-facing error message
        echo "Error: $db_type plugin is not installed or not correctly enabled (commands script missing or not executable)."
        return 1
    fi
}

# Get database connection info (uses prefixed global var for db_type)
get_db_connection_info() {
    local service_name="$1"
    local service_config_db_type_var="TEMPORAL_SERVICE_${service_name}_DB_TYPE"
    local service_config_db_service_var="TEMPORAL_SERVICE_${service_name}_DB_SERVICE_NAME"
    local db_type
    db_type=$(dokku config:get --global "$service_config_db_type_var" 2>/dev/null)
    local db_type_rc=$?
    echo "DEBUG: [get_db_connection_info] For service '$service_name', db_type from global config '$service_config_db_type_var': '$db_type' (rc=$db_type_rc)" >&2

    if [ $db_type_rc -ne 0 ] || [ -z "$db_type" ]; then
        echo "Warning: [get_db_connection_info] $service_config_db_type_var not found or empty for '$service_name'. Cannot reliably get DB info." >&2
        return 1 # Cannot proceed without knowing db_type
    fi

    # Check if a custom database service name is configured
    local actual_db_service
    actual_db_service=$(dokku config:get --global "$service_config_db_service_var" 2>/dev/null)
    if [ -n "$actual_db_service" ]; then
        echo "DEBUG: [get_db_connection_info] Using custom database service name: '$actual_db_service'" >&2
    else
        actual_db_service="$service_name"
        echo "DEBUG: [get_db_connection_info] Using default database service name: '$actual_db_service'" >&2
    fi

    echo "DEBUG: [get_db_connection_info] Using db_type '$db_type' to fetch Dokku db info for '$actual_db_service'" >&2
    local db_info
    db_info=$(dokku "$db_type":info "$actual_db_service" --dsn 2>/dev/null || dokku "$db_type":info "$actual_db_service" --quiet 2>/dev/null)
    local db_info_rc=$?

    if [ $db_info_rc -ne 0 ] || [ -z "$db_info" ]; then
        echo "Error: Could not get DB info for '$actual_db_service' using type '$db_type'. 'dokku $db_type:info $actual_db_service' failed or returned empty." >&2
        return 1
    fi
    echo "DEBUG: [get_db_connection_info] Raw db_info/DSN: $db_info" >&2

    local db_scheme db_user db_password db_host db_port db_name
    if [[ "$db_info" =~ ([^:]+)://([^:]*):([^@]*)@([^:]+):([0-9]+)/([^?]+) ]]; then # Made user/pass parsing more robust for empty values
        db_scheme="${BASH_REMATCH[1]}"
        db_user="${BASH_REMATCH[2]}"
        db_password="${BASH_REMATCH[3]}"
        db_host="${BASH_REMATCH[4]}"
        db_port="${BASH_REMATCH[5]}"
        db_name="${BASH_REMATCH[6]}"
    else
        echo "Warning: [get_db_connection_info] Could not parse DSN '$db_info' for '$service_name'. Manual parsing or different format needed." >&2
        db_host="PARSE_ERROR_HOST"
        db_port="PARSE_ERROR_PORT"
        db_name="PARSE_ERROR_DBNAME"
        db_user="PARSE_ERROR_USER"
        db_password="PARSE_ERROR_PASS"
    fi

    echo "DB_HOST=$db_host"
    echo "DB_PORT=$db_port"
    echo "DB_NAME=$db_name"
    echo "DB_USER=$db_user"
    echo "DB_PASSWORD=$db_password"
}

# Validate service name
validate_service_name() {
    local service_name="$1"
    local cmd="$2"
    echo "DEBUG: [validate_service_name] Called for service_name='$service_name', cmd='$cmd'" >&2
    if [ -z "$service_name" ]; then
        echo "Usage: dokku $PLUGIN_COMMAND_PREFIX:$cmd <service_name>"
        return 1
    fi
    # Add regex check for valid service name characters (e.g., alphanumeric, dash)
    if [[ ! "$service_name" =~ ^[a-zA-Z0-9][a-zA-Z0-9_-]*$ ]]; then
        echo "Error: Invalid service name '$service_name'. Name must start with alphanumeric and contain only alphanumeric, underscore, or hyphen."
        return 1
    fi
    echo "DEBUG: [validate_service_name] Service name '$service_name' provided and format is valid." >&2
    return 0
}

# Add service to global list of TEMPORAL_SERVICES
add_service() {
    local service_name="$1"
    echo "DEBUG: [add_service] Adding '$service_name' to TEMPORAL_SERVICES" >&2
    local current_services
    current_services=$(dokku config:get --global TEMPORAL_SERVICES 2>/dev/null)
    if [[ ".${current_services}." != *".${service_name}."* ]]; then
        if [ -z "$current_services" ]; then
            dokku config:set --global --no-restart TEMPORAL_SERVICES="$service_name"
        else
            dokku config:set --global --no-restart TEMPORAL_SERVICES="${current_services}.${service_name}"
        fi
    else
        echo "DEBUG: [add_service] '$service_name' already in TEMPORAL_SERVICES." >&2
    fi
}

# Remove service from global list of TEMPORAL_SERVICES
remove_service() {
    local service_name="$1"
    echo "DEBUG: [remove_service] Removing '$service_name' from TEMPORAL_SERVICES" >&2
    local current_services
    current_services=$(dokku config:get --global TEMPORAL_SERVICES 2>/dev/null)
    if [ -z "$current_services" ]; then
      echo "DEBUG: [remove_service] TEMPORAL_SERVICES is empty, nothing to remove." >&2
      return
    fi

    local IFS='.'
    read -ra services_array <<< "$current_services"
    local updated_services_array=()
    local found=0
    for s in "${services_array[@]}"; do
        if [[ "$s" == "$service_name" ]]; then
            found=1
        else
            updated_services_array+=("$s")
        fi
    done
    local IFS=$' \t\n'

    if [ "$found" -eq 0 ]; then
        echo "DEBUG: [remove_service] Service '$service_name' not found in TEMPORAL_SERVICES." >&2
        return
    fi

    if [ ${#updated_services_array[@]} -eq 0 ]; then
        dokku config:unset --global TEMPORAL_SERVICES
        echo "DEBUG: [remove_service] TEMPORAL_SERVICES is now empty." >&2
    else
        local updated_services_string
        printf -v updated_services_string '.%s' "${updated_services_array[@]}"
        updated_services_string=${updated_services_string#.}
        dokku config:set --global --no-restart TEMPORAL_SERVICES "$updated_services_string"
        echo "DEBUG: [remove_service] TEMPORAL_SERVICES updated to '$updated_services_string'." >&2
    fi
}

# Add app to linked apps list (global TEMPORAL_LINKED_APPS)
add_linked_app() {
    local service_name="$1" # Argument order from README is service then app
    local app_name="$2"
    echo "DEBUG: [add_linked_app] Linking service '$service_name' to app '$app_name' in TEMPORAL_LINKED_APPS" >&2
    local current_links
    current_links=$(dokku config:get --global TEMPORAL_LINKED_APPS 2>/dev/null)
    local new_link="${service_name}:${app_name}" # Format: service:app
    if [[ ".${current_links}." != *".${new_link}."* ]]; then
        if [ -z "$current_links" ]; then
            dokku config:set --global --no-restart TEMPORAL_LINKED_APPS="$new_link"
        else
            dokku config:set --global --no-restart TEMPORAL_LINKED_APPS="${current_links}.${new_link}"
        fi
    else
        echo "DEBUG: [add_linked_app] Link '$new_link' already in TEMPORAL_LINKED_APPS." >&2
    fi
}

# Remove app from linked apps list
remove_linked_app() {
    local service_name="$1"
    local app_name="$2"
    local link_to_remove="${service_name}:${app_name}"
    echo "DEBUG: [remove_linked_app] Unlinking '$link_to_remove' from TEMPORAL_LINKED_APPS" >&2
    local current_links
    current_links=$(dokku config:get --global TEMPORAL_LINKED_APPS 2>/dev/null)
    if [ -z "$current_links" ]; then
        echo "DEBUG: [remove_linked_app] TEMPORAL_LINKED_APPS is empty, nothing to remove." >&2
        return
    fi

    local IFS='.'
    read -ra links_array <<< "$current_links"
    local updated_links_array=()
    local found=0
    for l in "${links_array[@]}"; do
        if [[ "$l" == "$link_to_remove" ]]; then
            found=1
        else
            updated_links_array+=("$l")
        fi
    done
    local IFS=$' \t\n'

    if [ "$found" -eq 0 ]; then
        echo "DEBUG: [remove_linked_app] Link '$link_to_remove' not found in TEMPORAL_LINKED_APPS." >&2
        return
    fi

    if [ ${#updated_links_array[@]} -eq 0 ]; then
        dokku config:unset --global TEMPORAL_LINKED_APPS
        echo "DEBUG: [remove_linked_app] TEMPORAL_LINKED_APPS is now empty." >&2
    else
        local updated_links_string
        printf -v updated_links_string '.%s' "${updated_links_array[@]}"
        updated_links_string=${updated_links_string#.}
        dokku config:set --global --no-restart TEMPORAL_LINKED_APPS "$updated_links_string"
        echo "DEBUG: [remove_linked_app] TEMPORAL_LINKED_APPS updated to '$updated_links_string'." >&2
    fi
}

# Get linked apps for a service
get_linked_apps() {
    local service_name="$1"
    echo "DEBUG: [get_linked_apps] Getting apps linked to '$service_name' from TEMPORAL_LINKED_APPS" >&2
    local linked_apps_raw
    linked_apps_raw="$(dokku config:get --global TEMPORAL_LINKED_APPS 2>/dev/null)"
    if [ -n "$linked_apps_raw" ]; then
        # Output each app on a new line
        echo "$linked_apps_raw" | tr '.' '\n' | grep "^${service_name}:" | cut -d':' -f2-
    fi
    # If no links, outputs nothing
}